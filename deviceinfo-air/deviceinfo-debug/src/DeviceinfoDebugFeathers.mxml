<?xml version="1.0"?>
<f:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:f="library://ns.feathersui.com/mxml"
               theme="feathers.themes.MetalWorksMobileTheme">

    <fx:Script>
        <![CDATA[
        import com.github.airext.DeviceInfo;
        import com.github.airext.alert.Alert;
        import com.github.airext.alert.AlertAction;
        import com.github.airext.alert.AlertActionStyle;
        import com.github.airext.alert.AlertStyle;
        import com.github.airext.appearance.Theme;
        import com.github.airext.appearance.ThemeAndroidStyle;
        import com.github.airext.appearance.ThemeStyle;

        // Alerts

        private function showAlert(title: String, message: String): void {
            var alertController: Alert = new Alert(title, message, AlertStyle.alert);
            alertController.addAction(new AlertAction("OK", AlertActionStyle.normal, function (): void {
                log("OK");
            }));
            alertController.addAction(new AlertAction("Cancel", AlertActionStyle.normal, function (): void {
                log("Cancel");
            }));
            alertController.present();
        }

        private function showActionSheet(title: String, message: String): void {
            var alertController: Alert = new Alert(title, message, AlertStyle.actionSheet);
            alertController.addAction(new AlertAction("Cancel", AlertActionStyle.normal, function (): void {
                log("Cancel");
            }));
            alertController.addAction(new AlertAction("Delete", AlertActionStyle.normal, function (): void {
                log("Delete");
            }));
            alertController.addAction(new AlertAction("Send", AlertActionStyle.normal, function (): void {
                log("send");
            }));
            alertController.present();
        }

        private function showTitleAlert(): void {
            var alertController: Alert = new Alert("Processing...", null, AlertStyle.alert);
            alertController.present();
            setTimeout(function (): void {
                alertController.dismiss();
            }, 2000);
        }

        // Helper methods

        private static var outputText: ScrollText;

        private static function log(...rest): void {
            trace(rest);
            outputText.text += rest + "\n";
            outputText.verticalScrollPosition = outputText.maxVerticalScrollPosition;
        }

        // Handlers

        private function getIMEI(): void {
            log('imei:' + DeviceInfo.shared.getIMEI())
        }

        private function getDeviceIdentifier(): void {
            if (starling.utils.SystemUtil.isIOS) {
                log('getVendorIdentifier:' + DeviceInfo.shared.general.ios.getVendorIdentifier());
            } else if (com.github.airext.utils.SystemUtil.isAndroid) {
                log('getAndroidIdentifier:' + DeviceInfo.shared.general.android.getAndroidIdentifier());
            }
        }

        private function getDeviceInfo(): void {
            var info: Object = DeviceInfo.shared.general || {};

            log("name: " + info.name);
            log("model: " + info.model);
            log("manufacturer: " + info.manufacturer);
            log("systemName: " + info.systemName);
            log("systemVersion: " + info.systemVersion);
        }

        private function getSafeArea(): void {
            log("safe area:" + DeviceInfo.shared.screen.getSafeArea());
        }
        }
        ]]>
    </fx:Script>

    <f:layout>
        <f:VerticalLayout horizontalAlign="justify" />
    </f:layout>

    <f:ScrollContainer>
        <f:layoutData>
            <f:VerticalLayoutData percentHeight="80" />
        </f:layoutData>

        <f:layout>
            <f:VerticalLayout horizontalAlign="justify" verticalAlign="top" gap="10" paddingTop="20" paddingLeft="20" paddingRight="20" paddingBottom="20" />
        </f:layout>

        <f:Label text="Identity">
            <f:textRendererProperties>
                <fx:Object>
                    <fx:textAlign>center</fx:textAlign>
                </fx:Object>
            </f:textRendererProperties>
        </f:Label>

        <f:Button label="getIMEI" triggered="getIMEI()" />
        <f:Button label="getDeviceIdentifier" triggered="getDeviceIdentifier()" />

        <f:Label text="General Info">
            <f:textRendererProperties>
                <fx:Object>
                    <fx:textAlign>center</fx:textAlign>
                </fx:Object>
            </f:textRendererProperties>
        </f:Label>

        <f:Button label="getDeviceInfo" triggered="getDeviceInfo()" />

        <!--<f:Label text="General Info">-->
            <!--<f:textRendererProperties>-->
                <!--<fx:Object>-->
                    <!--<fx:textAlign>center</fx:textAlign>-->
                <!--</fx:Object>-->
            <!--</f:textRendererProperties>-->
        <!--</f:Label>-->
        <!--<f:Button label="hideStatusBar" triggered="DeviceInfo.shared.statusBar.setHidden(true)" />-->
        <!--<f:Button label="showStatusBar" triggered="DeviceInfo.shared.statusBar.setHidden(false)" />-->

        <f:Label text="Alert">
            <f:textRendererProperties>
                <fx:Object>
                    <fx:textAlign>center</fx:textAlign>
                </fx:Object>
            </f:textRendererProperties>
        </f:Label>

        <f:Button label="showAlert" triggered="showAlert('Info', 'Hi')" />
        <f:Button label="showActionSheet" triggered="showActionSheet('Info', 'Hi')" />
        <f:Button label="showTitleAlert" triggered="showTitleAlert()" />

        <f:Label text="Screen">
            <f:textRendererProperties>
                <fx:Object>
                    <fx:textAlign>center</fx:textAlign>
                </fx:Object>
            </f:textRendererProperties>
        </f:Label>

        <f:Button label="getSafeArea" triggered="getSafeArea()" />

        <f:Label text="Theme">
            <f:textRendererProperties>
                <fx:Object>
                    <fx:textAlign>center</fx:textAlign>
                </fx:Object>
            </f:textRendererProperties>
        </f:Label>

        <f:Button label="isThemeSupported" triggered="log(Theme.isSupported)" />
        <f:Button label="setLightTheme" triggered="Theme.shared.style = ThemeStyle.Light" />
        <f:Button label="setDarkTheme" triggered="Theme.shared.style = ThemeStyle.Dark" />
        <f:Button label="setMaterialDarkTheme" triggered="Theme.shared.android.style = ThemeAndroidStyle.MaterialDark" />
        <f:Button label="setMaterialLightTheme" triggered="Theme.shared.android.style = ThemeAndroidStyle.MaterialLight" />
        <f:Button label="setHoloDarkTheme" triggered="Theme.shared.android.style = ThemeAndroidStyle.HoloDark" />
        <f:Button label="setHoloLightTheme" triggered="Theme.shared.android.style = ThemeAndroidStyle.HoloLight" />
        <f:Button label="setAirDefaultTheme" triggered="Theme.shared.android.style = ThemeAndroidStyle.NoShadow" />

    </f:ScrollContainer>

    <f:ScrollText initialize="outputText = event.target as ScrollText">
        <f:layoutData>
            <f:VerticalLayoutData percentHeight="20" />
        </f:layoutData>
    </f:ScrollText>

</f:Application>
